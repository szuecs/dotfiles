require 'optparse'
<% file_name = File.basename(__FILE__).sub(/#{File.extname(__FILE__)}$/ , "")
class_name = file_name.sub(/#{File.extname(file_name)}$/ , "")
module_name = File.basename(File.dirname(File.dirname(File.realdirpath(__FILE__))))
begin
  require 'facets'
  class_name = class_name.upper_camelcase
  module_name = module_name.upper_camelcase
rescue
end
%>
module <%= module_name %>
  VERSION = '<%= Time.now.strftime("%y.%m.%d") %>'
  
  class <%= class_name %>
    
    class << self
      def default_options
        {
          :parameter => "default_value",
        }
      end
      
      def parse_options
        options = default_options
        
        executable_name = File.basename(__FILE__).sub(/\.rb$/,'')
        
        OptionParser.new do |opts|
          opts.banner  = "% #{executable_name} [options]"
          opts.version = ::<%= module_name %>::VERSION
          opts.separator ""
          opts.separator "Specific options:"
          opts.separator ""
          
          opts.on('-h', '--help', 'Display this help.') do
            abort "#{opts}"
          end
          opts.on('-V', '--version', 'Print version.') do |s|
            abort("#{executable_name} #{::<%= module_name %>::VERSION}")
          end
          
          opts.on('--parameter <name>', 'example parameter.') do |s|
            options[:parameter] = s
          end
          
          begin
            opts.parse!
          rescue => e
            abort "#{e}\n\n#{opts}"
          end
        end
        options
      end
      
      def main(options)
        mc = <%= module_name %>::<%= class_name %>.new(options)
        # do sth with mc..
        
        return 0
      end
    end # class methods end
    
    def initialize(options)
      @parameter = options[:parameter]
    end
    
    private
    
  end
end

