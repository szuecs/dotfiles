require 'rake'
require "rake/clean"
require 'rake/testtask'
require 'rdoc/task'

$:.unshift 'lib'
require "example"

##############################################################################
# OPTIONS
##############################################################################

PKG_NAME      = 'example' # FIXME pkg_name
PKG_VERSION   = NameSpace::VERSION # FIXME Namespace
AUTHORS       = ['Sandor Szuecs']
EMAIL         = "sandor.szuecs@fu-berlin.de"
HOMEPAGE      = "http://github.com/szuecs/example" # FIXME homepage
SUMMARY       = "" # FIXME summary
DESCRIPTION   = "" # FIXME description
PKG_FILES     = Dir.glob("{bin}/**/*") | Dir.glob("lib/**/*.rb") | ["README.rdoc", "LICENSE", "CHANGELOG.rdoc"]
EXE           = ["example"] # FIXME executables

RDOC_OPTIONS  = [
                "--quiet",
                "--title", SUMMARY,
                "--opname", "index.html",
                "--main", "lib/#{PKG_NAME}.rb",
                "--line-numbers",
                "--inline-source"
                ]

# Extra files outside of the lib dir that should be included with the rdocs.
RDOC_FILES    = (%w( README.rdoc CHANGELOG.rdoc) ).sort

task :default => [:test]

Rake::TestTask.new do |t|
  t.libs << "test"
  t.test_files = Dir.glob('test/**/test_*.rb')
end

# RDOC
#######
Rake::RDocTask.new do |rd|

  # which dir should rdoc files be installed in?
  rd.rdoc_dir = 'rdoc'

  # the full list of files to be included
  rd.rdoc_files.include(RDOC_FILES, "lib/**/*.rb")

  # the full list of options that are common between gem build
  # and 'rake rdoc' build of docs.
  rd.options = RDOC_OPTIONS

  # Devs Only : Uncomment to also document private methods in the rdocs
  # Please don't check this change in to the source repo.
  #rd.options << '--all'

  # Devs Only : Uncomment to generate dot (graphviz) diagrams along with rdocs.
  # This requires that graphiz (dot) be installed as a local binary and on your path.
  # See : http://www.graphviz.org/
  # Please don't check this change in to the source repo as it introduces a binary dependency.
  #rd.options << '--diagram'
  #rd.options << '--fileboxes'

end


# RCOV
#######

# Conditional require rcov/rcovtask if present
begin
  require 'rcov/rcovtask'

  Rcov::RcovTask.new do |t|
    t.test_files = Dir.glob("test/**/test_*.rb")
    t.output_dir = "coverage"
  end
rescue LoadError
end


##############################################################################
# SYNTAX CHECKING
##############################################################################

desc "Check syntax of all Ruby files."
task :check_syntax do
  `find . -name "*.rb" |xargs -n1 ruby -c |grep -v "Syntax OK"`
  puts "* Done"
end

##############################################################################
# PACKAGING & INSTALLATION
##############################################################################

# What files/dirs should 'rake clean' remove?
CLEAN.include ["*.gemspec","*.gem", "pkg", "rdoc", "coverage", "run"]

begin
  require 'rubygems/package_task'

  spec = Gem::Specification.new do |s|
    s.name = PKG_NAME
    s.version = PKG_VERSION
    s.authors = AUTHORS
    s.email = EMAIL
    s.rubyforge_project = PKG_NAME
    s.summary = SUMMARY
    s.description = DESCRIPTION
    s.homepage = HOMEPAGE
    s.platform = Gem::Platform::RUBY
    s.require_path = 'lib'
    s.files = PKG_FILES
    s.test_files = Dir.glob("test/**/test_*.rb")
    s.has_rdoc = true
    s.extra_rdoc_files = RDOC_FILES
    s.rdoc_options = RDOC_OPTIONS
    s.required_ruby_version = ">= 1.8.6"
    s.executables = EXE
  end

  Gem::PackageTask.new(spec) do |pkg|
    pkg.gem_spec = spec
  end

  namespace :gem do

    desc "Run :package and install the .gem locally"
    task :install => [:update_gemspec, :package] do
      sh %{sudo gem install --local pkg/#{PKG_NAME}-#{PKG_VERSION}.gem}
    end

    desc "Like gem:install but without ri or rdocs"
    task :install_fast => [:update_gemspec, :package] do
      sh %{sudo gem install --local pkg/#{PKG_NAME}-#{PKG_VERSION}.gem --no-rdoc --no-ri}
    end

    desc "Run :clean and uninstall the .gem"
    task :uninstall => :clean do
      sh %{sudo gem uninstall #{PKG_NAME}}
    end

    # Thanks to the Merb project for this code.
    desc "Update Github Gemspec"
    task :update_gemspec do
      skip_fields = %w(new_platform original_platform date)

      result = "# WARNING : RAKE AUTO-GENERATED FILE.  DO NOT MANUALLY EDIT!\n"
      result << "# RUN : 'rake gem:update_gemspec'\n\n"
      result << "Gem::Specification.new do |s|\n"
      spec.instance_variables.sort.each do |ivar|
        value = spec.instance_variable_get(ivar)
        name  = ivar.to_s.split("@").last
        next if skip_fields.include?(name) || value.nil? || value == "" || (value.respond_to?(:empty?) && value.empty?)
        if name == "dependencies"
          value.each do |d|
            dep, *ver = d.to_s.split(" ")
            result <<  "  s.add_dependency #{dep.inspect}, #{ver.join(" ").inspect.gsub(/[()]/, "")}\n"
          end
        else
          case value
          when Array
            value =  name != "files" ? value.inspect : value.sort.uniq.inspect.split(",").join(",\n")
          when String, Fixnum, true, false
            value = value.inspect
          else
            value = value.to_s.inspect
          end
          result << "  s.#{name} = #{value}\n"
        end
      end
      result << "end"
      File.open(File.join(File.dirname(__FILE__), "#{spec.name}.gemspec"), "w"){|f| f << result}
    end

  end # namespace :gem

  # also keep the gemspec up to date each time we package a tarball or gem
  task :package => ['gem:update_gemspec']
  task :gem => ['gem:update_gemspec']

rescue LoadError
  puts <<EOF
###
  Packaging Warning : RubyGems is apparently not installed on this
  system and any file add/remove/rename will not
  be auto-updated 
###
EOF
end

# we are apparently on a system that does not have RubyGems installed.
# Lets try to provide only the basic tarball package tasks as a fallback.
unless defined? Gem
  begin
    require 'rake/packagetask'
    Gem::PackageTask.new(PKG_NAME, PKG_VERSION) do |p|
      p.package_files = PKG_FILES
    end
  rescue LoadError
    puts <<EOF
###
  Warning : Unable to require the 'rake/packagetask'. Is Rake installed?
###
EOF
  end
end
